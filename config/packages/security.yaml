security:
    access_decision_manager:
        strategy: unanimous
    role_hierarchy:
        ROLE_RESERVATION_OWNER: [ROLE_USER]
        ROLE_ADMIN:
          - ROLE_USER
          - ROLE_SONATA_ADMIN
          - ROLE_ADMIN_CINEMA_HALL_SESSION_COPY
          - ROLE_ADMIN_CINEMA_LIST
          - ROLE_ADMIN_CINEMA_CREATE
          - ROLE_ADMIN_CINEMA_EDIT
          - ROLE_ADMIN_CINEMA_DELETE
          - ROLE_ADMIN_CINEMA_VIEW
          - ROLE_ADMIN_HALL_LIST
          - ROLE_ADMIN_HALL_CREATE
          - ROLE_ADMIN_HALL_EDIT
          - ROLE_ADMIN_HALL_DELETE
          - ROLE_ADMIN_HALL_VIEW
          - ROLE_ADMIN_HALL_SESSION_LIST
          - ROLE_ADMIN_HALL_SESSION_CREATE
          - ROLE_ADMIN_HALL_SESSION_EDIT
          - ROLE_ADMIN_HALL_SESSION_DELETE
          - ROLE_ADMIN_HALL_SESSION_VIEW
          - ROLE_ADMIN_RESERVATION_LIST
          - ROLE_ADMIN_RESERVATION_CREATE
          - ROLE_ADMIN_RESERVATION_EDIT
          - ROLE_ADMIN_RESERVATION_DELETE
          - ROLE_ADMIN_RESERVATION_VIEW
          - ROLE_SONATA_USER_ADMIN_USER_LIST
          - ROLE_SONATA_USER_ADMIN_USER_CREATE
          - ROLE_SONATA_USER_ADMIN_USER_EDIT
          - ROLE_SONATA_USER_ADMIN_USER_DELETE
          - ROLE_SONATA_USER_ADMIN_USER_VIEW
          - ROLE_SONATA_USER_ADMIN_GROUP_LIST
          - ROLE_SONATA_USER_ADMIN_GROUP_CREATE
          - ROLE_SONATA_USER_ADMIN_GROUP_EDIT
          - ROLE_SONATA_USER_ADMIN_GROUP_DELETE
          - ROLE_SONATA_USER_ADMIN_GROUP_VIEW

        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt
        App\Entity\ReservationOwner: bcrypt

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

        reservation_owner:
            id: App\Security\ReservationOwnerProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
                target:         /admin/login
            anonymous:          true

        reservation_owner:
            pattern:            /reserving/(.*)
            context:            reservation_owner
            provider:           reservation_owner
            guard:
                authenticators:
                    - App\Security\ReservationOwnerAuthenticator
            form_login:
                provider:       reservation_owner
                login_path:     /reserving/reservation-owner/login
                use_forward:    false
                check_path:     /reserving/reservation-owner/login_check
                failure_path:   null
            logout:
                path:           /reserving/reservation-owner/logout
                target:         /reserving/reservation-owner/login
            anonymous:          true
        main:
            anonymous: true

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_SONATA_ADMIN] }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/reserving/*, role: [IS_AUTHENTICATED_ANONYMOUSLY, ROLE_RESERVATION_OWNER] }
        - { path: ^/reserving/reservation-owner/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/reserving/reservation-owner/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/reserving/reservation-owner/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }